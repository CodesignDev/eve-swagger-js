/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.4.1.dev1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetAlliancesInternalServerError', 'model/GetAlliancesAllianceIdOk', 'model/GetAlliancesAllianceIdInternalServerError', 'model/GetAlliancesAllianceIdNotFound', 'model/GetAlliancesAllianceIdCorporationsInternalServerError', 'model/GetAlliancesAllianceIdIconsOk', 'model/GetAlliancesAllianceIdIconsInternalServerError', 'model/GetAlliancesAllianceIdIconsNotFound', 'model/GetAlliancesNamesInternalServerError', 'model/GetAlliancesNames200Ok'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetAlliancesInternalServerError'), require('../model/GetAlliancesAllianceIdOk'), require('../model/GetAlliancesAllianceIdInternalServerError'), require('../model/GetAlliancesAllianceIdNotFound'), require('../model/GetAlliancesAllianceIdCorporationsInternalServerError'), require('../model/GetAlliancesAllianceIdIconsOk'), require('../model/GetAlliancesAllianceIdIconsInternalServerError'), require('../model/GetAlliancesAllianceIdIconsNotFound'), require('../model/GetAlliancesNamesInternalServerError'), require('../model/GetAlliancesNames200Ok'));
  } else {
    // Browser globals (root is window)
    if (!root.EveSwaggerInterface) {
      root.EveSwaggerInterface = {};
    }
    root.EveSwaggerInterface.AllianceApi = factory(root.EveSwaggerInterface.ApiClient, root.EveSwaggerInterface.GetAlliancesInternalServerError, root.EveSwaggerInterface.GetAlliancesAllianceIdOk, root.EveSwaggerInterface.GetAlliancesAllianceIdInternalServerError, root.EveSwaggerInterface.GetAlliancesAllianceIdNotFound, root.EveSwaggerInterface.GetAlliancesAllianceIdCorporationsInternalServerError, root.EveSwaggerInterface.GetAlliancesAllianceIdIconsOk, root.EveSwaggerInterface.GetAlliancesAllianceIdIconsInternalServerError, root.EveSwaggerInterface.GetAlliancesAllianceIdIconsNotFound, root.EveSwaggerInterface.GetAlliancesNamesInternalServerError, root.EveSwaggerInterface.GetAlliancesNames200Ok);
  }
}(this, function(ApiClient, GetAlliancesInternalServerError, GetAlliancesAllianceIdOk, GetAlliancesAllianceIdInternalServerError, GetAlliancesAllianceIdNotFound, GetAlliancesAllianceIdCorporationsInternalServerError, GetAlliancesAllianceIdIconsOk, GetAlliancesAllianceIdIconsInternalServerError, GetAlliancesAllianceIdIconsNotFound, GetAlliancesNamesInternalServerError, GetAlliancesNames200Ok) {
  'use strict';

  /**
   * Alliance service.
   * @module api/AllianceApi
   * @version 0.4.1.dev1
   */

  /**
   * Constructs a new AllianceApi. 
   * @alias module:api/AllianceApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAlliances operation.
     * @callback module:api/AllianceApi~getAlliancesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Integer'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all alliances
     * List all active player alliances  ---  Alternate route: &#x60;/v1/alliances/&#x60;  Alternate route: &#x60;/legacy/alliances/&#x60;  Alternate route: &#x60;/dev/alliances/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/AllianceApi~getAlliancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Integer'>}
     */
    this.getAlliances = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Integer'];

      return this.apiClient.callApi(
        '/alliances/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlliancesAllianceId operation.
     * @callback module:api/AllianceApi~getAlliancesAllianceIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAlliancesAllianceIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get alliance information
     * Public information about an alliance  ---  Alternate route: &#x60;/v2/alliances/{alliance_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Integer} allianceId An Eve alliance ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/AllianceApi~getAlliancesAllianceIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAlliancesAllianceIdOk}
     */
    this.getAlliancesAllianceId = function(allianceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'allianceId' is set
      if (allianceId == undefined || allianceId == null) {
        throw "Missing the required parameter 'allianceId' when calling getAlliancesAllianceId";
      }


      var pathParams = {
        'alliance_id': allianceId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetAlliancesAllianceIdOk;

      return this.apiClient.callApi(
        '/alliances/{alliance_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlliancesAllianceIdCorporations operation.
     * @callback module:api/AllianceApi~getAlliancesAllianceIdCorporationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Integer'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List alliance&#39;s corporations
     * List all current member corporations of an alliance  ---  Alternate route: &#x60;/v1/alliances/{alliance_id}/corporations/&#x60;  Alternate route: &#x60;/legacy/alliances/{alliance_id}/corporations/&#x60;  Alternate route: &#x60;/dev/alliances/{alliance_id}/corporations/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Integer} allianceId An EVE alliance ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/AllianceApi~getAlliancesAllianceIdCorporationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Integer'>}
     */
    this.getAlliancesAllianceIdCorporations = function(allianceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'allianceId' is set
      if (allianceId == undefined || allianceId == null) {
        throw "Missing the required parameter 'allianceId' when calling getAlliancesAllianceIdCorporations";
      }


      var pathParams = {
        'alliance_id': allianceId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Integer'];

      return this.apiClient.callApi(
        '/alliances/{alliance_id}/corporations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlliancesAllianceIdIcons operation.
     * @callback module:api/AllianceApi~getAlliancesAllianceIdIconsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAlliancesAllianceIdIconsOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get alliance icon
     * Get the icon urls for a alliance  ---  Alternate route: &#x60;/v1/alliances/{alliance_id}/icons/&#x60;  Alternate route: &#x60;/legacy/alliances/{alliance_id}/icons/&#x60;  Alternate route: &#x60;/dev/alliances/{alliance_id}/icons/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Integer} allianceId An EVE alliance ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/AllianceApi~getAlliancesAllianceIdIconsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAlliancesAllianceIdIconsOk}
     */
    this.getAlliancesAllianceIdIcons = function(allianceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'allianceId' is set
      if (allianceId == undefined || allianceId == null) {
        throw "Missing the required parameter 'allianceId' when calling getAlliancesAllianceIdIcons";
      }


      var pathParams = {
        'alliance_id': allianceId
      };
      var queryParams = {
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetAlliancesAllianceIdIconsOk;

      return this.apiClient.callApi(
        '/alliances/{alliance_id}/icons/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlliancesNames operation.
     * @callback module:api/AllianceApi~getAlliancesNamesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetAlliancesNames200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get alliance names
     * Resolve a set of alliance IDs to alliance names  ---  Alternate route: &#x60;/v1/alliances/names/&#x60;  Alternate route: &#x60;/legacy/alliances/names/&#x60;  Alternate route: &#x60;/dev/alliances/names/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Array.<Integer>} allianceIds A comma separated list of alliance IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {String} opts.userAgent Client identifier, takes precedence over headers
     * @param {String} opts.xUserAgent Client identifier, takes precedence over User-Agent
     * @param {module:api/AllianceApi~getAlliancesNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetAlliancesNames200Ok>}
     */
    this.getAlliancesNames = function(allianceIds, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'allianceIds' is set
      if (allianceIds == undefined || allianceIds == null) {
        throw "Missing the required parameter 'allianceIds' when calling getAlliancesNames";
      }


      var pathParams = {
      };
      var queryParams = {
        'alliance_ids': this.apiClient.buildCollectionParam(allianceIds, 'csv'),
        'datasource': opts['datasource'],
        'user_agent': opts['userAgent']
      };
      var headerParams = {
        'X-User-Agent': opts['xUserAgent']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetAlliancesNames200Ok];

      return this.apiClient.callApi(
        '/alliances/names/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
