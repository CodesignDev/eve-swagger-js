/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeleteCharactersCharacterIdContactsForbidden', 'model/DeleteCharactersCharacterIdContactsInternalServerError', 'model/GetCharactersCharacterIdContacts200Ok', 'model/GetCharactersCharacterIdContactsForbidden', 'model/GetCharactersCharacterIdContactsInternalServerError', 'model/GetCharactersCharacterIdContactsLabelsInternalServerError', 'model/GetCharactersCharacterIdContactsLabels200Ok', 'model/GetCharactersCharacterIdContactsLabelsForbidden', 'model/PostCharactersCharacterIdContactsForbidden', 'model/PostCharactersCharacterIdContactsInternalServerError', 'model/PutCharactersCharacterIdContactsForbidden', 'model/PutCharactersCharacterIdContactsInternalServerError'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeleteCharactersCharacterIdContactsForbidden'), require('../model/DeleteCharactersCharacterIdContactsInternalServerError'), require('../model/GetCharactersCharacterIdContacts200Ok'), require('../model/GetCharactersCharacterIdContactsForbidden'), require('../model/GetCharactersCharacterIdContactsInternalServerError'), require('../model/GetCharactersCharacterIdContactsLabelsInternalServerError'), require('../model/GetCharactersCharacterIdContactsLabels200Ok'), require('../model/GetCharactersCharacterIdContactsLabelsForbidden'), require('../model/PostCharactersCharacterIdContactsForbidden'), require('../model/PostCharactersCharacterIdContactsInternalServerError'), require('../model/PutCharactersCharacterIdContactsForbidden'), require('../model/PutCharactersCharacterIdContactsInternalServerError'));
  } else {
    // Browser globals (root is window)
    if (!root.EveSwaggerInterface) {
      root.EveSwaggerInterface = {};
    }
    root.EveSwaggerInterface.ContactsApi = factory(root.EveSwaggerInterface.ApiClient, root.EveSwaggerInterface.DeleteCharactersCharacterIdContactsForbidden, root.EveSwaggerInterface.DeleteCharactersCharacterIdContactsInternalServerError, root.EveSwaggerInterface.GetCharactersCharacterIdContacts200Ok, root.EveSwaggerInterface.GetCharactersCharacterIdContactsForbidden, root.EveSwaggerInterface.GetCharactersCharacterIdContactsInternalServerError, root.EveSwaggerInterface.GetCharactersCharacterIdContactsLabelsInternalServerError, root.EveSwaggerInterface.GetCharactersCharacterIdContactsLabels200Ok, root.EveSwaggerInterface.GetCharactersCharacterIdContactsLabelsForbidden, root.EveSwaggerInterface.PostCharactersCharacterIdContactsForbidden, root.EveSwaggerInterface.PostCharactersCharacterIdContactsInternalServerError, root.EveSwaggerInterface.PutCharactersCharacterIdContactsForbidden, root.EveSwaggerInterface.PutCharactersCharacterIdContactsInternalServerError);
  }
}(this, function(ApiClient, DeleteCharactersCharacterIdContactsForbidden, DeleteCharactersCharacterIdContactsInternalServerError, GetCharactersCharacterIdContacts200Ok, GetCharactersCharacterIdContactsForbidden, GetCharactersCharacterIdContactsInternalServerError, GetCharactersCharacterIdContactsLabelsInternalServerError, GetCharactersCharacterIdContactsLabels200Ok, GetCharactersCharacterIdContactsLabelsForbidden, PostCharactersCharacterIdContactsForbidden, PostCharactersCharacterIdContactsInternalServerError, PutCharactersCharacterIdContactsForbidden, PutCharactersCharacterIdContactsInternalServerError) {
  'use strict';

  /**
   * Contacts service.
   * @module api/ContactsApi
   * @version 0.3.8
   */

  /**
   * Constructs a new ContactsApi. 
   * @alias module:api/ContactsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteCharactersCharacterIdContacts operation.
     * @callback module:api/ContactsApi~deleteCharactersCharacterIdContactsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete contacts
     * Bulk delete contacts  ---  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60; 
     * @param {Integer} characterId ID for a character
     * @param {Array.<module:model/Integer>} contactIds A list of contacts to edit
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:api/ContactsApi~deleteCharactersCharacterIdContactsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCharactersCharacterIdContacts = function(characterId, contactIds, opts, callback) {
      opts = opts || {};
      var postBody = contactIds;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw "Missing the required parameter 'characterId' when calling deleteCharactersCharacterIdContacts";
      }

      // verify the required parameter 'contactIds' is set
      if (contactIds == undefined || contactIds == null) {
        throw "Missing the required parameter 'contactIds' when calling deleteCharactersCharacterIdContacts";
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'datasource': opts['datasource']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/characters/{character_id}/contacts/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdContacts operation.
     * @callback module:api/ContactsApi~getCharactersCharacterIdContactsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdContacts200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contacts
     * Return contacts of a character  ---  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60;   ---  This route is cached for up to 300 seconds
     * @param {Integer} characterId ID for a character
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page page integer (default to 1)
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:api/ContactsApi~getCharactersCharacterIdContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdContacts200Ok>}
     */
    this.getCharactersCharacterIdContacts = function(characterId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw "Missing the required parameter 'characterId' when calling getCharactersCharacterIdContacts";
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'page': opts['page'],
        'datasource': opts['datasource']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCharactersCharacterIdContacts200Ok];

      return this.apiClient.callApi(
        '/characters/{character_id}/contacts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdContactsLabels operation.
     * @callback module:api/ContactsApi~getCharactersCharacterIdContactsLabelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdContactsLabels200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contact labels
     * Return custom labels for contacts the character defined  ---  Alternate route: &#x60;/v1/characters/{character_id}/contacts/labels/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/labels/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/contacts/labels/&#x60;   ---  This route is cached for up to 300 seconds
     * @param {Integer} characterId ID for a character
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:api/ContactsApi~getCharactersCharacterIdContactsLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdContactsLabels200Ok>}
     */
    this.getCharactersCharacterIdContactsLabels = function(characterId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw "Missing the required parameter 'characterId' when calling getCharactersCharacterIdContactsLabels";
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'datasource': opts['datasource']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCharactersCharacterIdContactsLabels200Ok];

      return this.apiClient.callApi(
        '/characters/{character_id}/contacts/labels/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCharactersCharacterIdContacts operation.
     * @callback module:api/ContactsApi~postCharactersCharacterIdContactsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Integer'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add contacts
     * Bulk add contacts with same settings  ---  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60; 
     * @param {Integer} characterId ID for a character
     * @param {Number} standing Standing for the new contact
     * @param {Array.<module:model/Integer>} contactIds A list of contacts to add
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.watched Whether the new contact should be watched, note this is only effective on characters (default to false)
     * @param {Integer} opts.labelId Add a custom label to the new contact (default to 0)
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:api/ContactsApi~postCharactersCharacterIdContactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Integer'>}
     */
    this.postCharactersCharacterIdContacts = function(characterId, standing, contactIds, opts, callback) {
      opts = opts || {};
      var postBody = contactIds;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw "Missing the required parameter 'characterId' when calling postCharactersCharacterIdContacts";
      }

      // verify the required parameter 'standing' is set
      if (standing == undefined || standing == null) {
        throw "Missing the required parameter 'standing' when calling postCharactersCharacterIdContacts";
      }

      // verify the required parameter 'contactIds' is set
      if (contactIds == undefined || contactIds == null) {
        throw "Missing the required parameter 'contactIds' when calling postCharactersCharacterIdContacts";
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'standing': standing,
        'watched': opts['watched'],
        'label_id': opts['labelId'],
        'datasource': opts['datasource']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ['Integer'];

      return this.apiClient.callApi(
        '/characters/{character_id}/contacts/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putCharactersCharacterIdContacts operation.
     * @callback module:api/ContactsApi~putCharactersCharacterIdContactsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit contacts
     * Bulk edit contacts with same settings  ---  Alternate route: &#x60;/v1/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/contacts/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/contacts/&#x60; 
     * @param {Integer} characterId ID for a character
     * @param {Number} standing Standing for the contact
     * @param {Array.<module:model/Integer>} contactIds A list of contacts to edit
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.watched Whether the contact should be watched, note this is only effective on characters (default to false)
     * @param {Integer} opts.labelId Add a custom label to the contact, use 0 for clearing label (default to 0)
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:api/ContactsApi~putCharactersCharacterIdContactsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putCharactersCharacterIdContacts = function(characterId, standing, contactIds, opts, callback) {
      opts = opts || {};
      var postBody = contactIds;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw "Missing the required parameter 'characterId' when calling putCharactersCharacterIdContacts";
      }

      // verify the required parameter 'standing' is set
      if (standing == undefined || standing == null) {
        throw "Missing the required parameter 'standing' when calling putCharactersCharacterIdContacts";
      }

      // verify the required parameter 'contactIds' is set
      if (contactIds == undefined || contactIds == null) {
        throw "Missing the required parameter 'contactIds' when calling putCharactersCharacterIdContacts";
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'standing': standing,
        'watched': opts['watched'],
        'label_id': opts['labelId'],
        'datasource': opts['datasource']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/characters/{character_id}/contacts/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
