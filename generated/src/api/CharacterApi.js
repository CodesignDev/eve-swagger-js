/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetCharactersCharacterIdUnprocessableEntity', 'model/GetCharactersCharacterIdOk', 'model/GetCharactersCharacterIdInternalServerError', 'model/GetCharactersCharacterIdCorporationhistoryInternalServerError', 'model/GetCharactersCharacterIdCorporationhistory200Ok', 'model/GetCharactersCharacterIdPortraitNotFound', 'model/GetCharactersCharacterIdPortraitOk', 'model/GetCharactersCharacterIdPortraitInternalServerError', 'model/GetCharactersNamesInternalServerError', 'model/GetCharactersNames200Ok', 'model/PostCharactersCharacterIdCspaInternalServerError', 'model/PostCharactersCharacterIdCspaForbidden', 'model/PostCharactersCharacterIdCspaCharacters', 'model/PostCharactersCharacterIdCspaCreated'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetCharactersCharacterIdUnprocessableEntity'), require('../model/GetCharactersCharacterIdOk'), require('../model/GetCharactersCharacterIdInternalServerError'), require('../model/GetCharactersCharacterIdCorporationhistoryInternalServerError'), require('../model/GetCharactersCharacterIdCorporationhistory200Ok'), require('../model/GetCharactersCharacterIdPortraitNotFound'), require('../model/GetCharactersCharacterIdPortraitOk'), require('../model/GetCharactersCharacterIdPortraitInternalServerError'), require('../model/GetCharactersNamesInternalServerError'), require('../model/GetCharactersNames200Ok'), require('../model/PostCharactersCharacterIdCspaInternalServerError'), require('../model/PostCharactersCharacterIdCspaForbidden'), require('../model/PostCharactersCharacterIdCspaCharacters'), require('../model/PostCharactersCharacterIdCspaCreated'));
  } else {
    // Browser globals (root is window)
    if (!root.EveSwaggerInterface) {
      root.EveSwaggerInterface = {};
    }
    root.EveSwaggerInterface.CharacterApi = factory(root.EveSwaggerInterface.ApiClient, root.EveSwaggerInterface.GetCharactersCharacterIdUnprocessableEntity, root.EveSwaggerInterface.GetCharactersCharacterIdOk, root.EveSwaggerInterface.GetCharactersCharacterIdInternalServerError, root.EveSwaggerInterface.GetCharactersCharacterIdCorporationhistoryInternalServerError, root.EveSwaggerInterface.GetCharactersCharacterIdCorporationhistory200Ok, root.EveSwaggerInterface.GetCharactersCharacterIdPortraitNotFound, root.EveSwaggerInterface.GetCharactersCharacterIdPortraitOk, root.EveSwaggerInterface.GetCharactersCharacterIdPortraitInternalServerError, root.EveSwaggerInterface.GetCharactersNamesInternalServerError, root.EveSwaggerInterface.GetCharactersNames200Ok, root.EveSwaggerInterface.PostCharactersCharacterIdCspaInternalServerError, root.EveSwaggerInterface.PostCharactersCharacterIdCspaForbidden, root.EveSwaggerInterface.PostCharactersCharacterIdCspaCharacters, root.EveSwaggerInterface.PostCharactersCharacterIdCspaCreated);
  }
}(this, function(ApiClient, GetCharactersCharacterIdUnprocessableEntity, GetCharactersCharacterIdOk, GetCharactersCharacterIdInternalServerError, GetCharactersCharacterIdCorporationhistoryInternalServerError, GetCharactersCharacterIdCorporationhistory200Ok, GetCharactersCharacterIdPortraitNotFound, GetCharactersCharacterIdPortraitOk, GetCharactersCharacterIdPortraitInternalServerError, GetCharactersNamesInternalServerError, GetCharactersNames200Ok, PostCharactersCharacterIdCspaInternalServerError, PostCharactersCharacterIdCspaForbidden, PostCharactersCharacterIdCspaCharacters, PostCharactersCharacterIdCspaCreated) {
  'use strict';

  /**
   * Character service.
   * @module api/CharacterApi
   * @version 0.3.4
   */

  /**
   * Constructs a new CharacterApi. 
   * @alias module:api/CharacterApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getCharactersCharacterId operation.
     * @callback module:api/CharacterApi~getCharactersCharacterIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCharactersCharacterIdOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get character&#39;s public information
     * Public information about a character  ---  Alternate route: &#x60;/v3/characters/{character_id}/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Integer} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:api/CharacterApi~getCharactersCharacterIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCharactersCharacterIdOk}
     */
    this.getCharactersCharacterId = function(characterId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw "Missing the required parameter 'characterId' when calling getCharactersCharacterId";
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'datasource': opts['datasource']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetCharactersCharacterIdOk;

      return this.apiClient.callApi(
        '/characters/{character_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdCorporationhistory operation.
     * @callback module:api/CharacterApi~getCharactersCharacterIdCorporationhistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersCharacterIdCorporationhistory200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get corporation history
     * Get a list of all the corporations a character has been a member of  ---  Alternate route: &#x60;/v1/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/corporationhistory/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/corporationhistory/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Integer} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:api/CharacterApi~getCharactersCharacterIdCorporationhistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersCharacterIdCorporationhistory200Ok>}
     */
    this.getCharactersCharacterIdCorporationhistory = function(characterId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw "Missing the required parameter 'characterId' when calling getCharactersCharacterIdCorporationhistory";
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'datasource': opts['datasource']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCharactersCharacterIdCorporationhistory200Ok];

      return this.apiClient.callApi(
        '/characters/{character_id}/corporationhistory/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersCharacterIdPortrait operation.
     * @callback module:api/CharacterApi~getCharactersCharacterIdPortraitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCharactersCharacterIdPortraitOk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get character portraits
     * Get portrait urls for a character  ---  Alternate route: &#x60;/v2/characters/{character_id}/portrait/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/portrait/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Integer} characterId An EVE character ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:api/CharacterApi~getCharactersCharacterIdPortraitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCharactersCharacterIdPortraitOk}
     */
    this.getCharactersCharacterIdPortrait = function(characterId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw "Missing the required parameter 'characterId' when calling getCharactersCharacterIdPortrait";
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'datasource': opts['datasource']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetCharactersCharacterIdPortraitOk;

      return this.apiClient.callApi(
        '/characters/{character_id}/portrait/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCharactersNames operation.
     * @callback module:api/CharacterApi~getCharactersNamesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetCharactersNames200Ok>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get character names
     * Resolve a set of character IDs to character names  ---  Alternate route: &#x60;/v1/characters/names/&#x60;  Alternate route: &#x60;/legacy/characters/names/&#x60;  Alternate route: &#x60;/dev/characters/names/&#x60;   ---  This route is cached for up to 3600 seconds
     * @param {Array.<Integer>} characterIds A comma separated list of character IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:api/CharacterApi~getCharactersNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GetCharactersNames200Ok>}
     */
    this.getCharactersNames = function(characterIds, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'characterIds' is set
      if (characterIds == undefined || characterIds == null) {
        throw "Missing the required parameter 'characterIds' when calling getCharactersNames";
      }


      var pathParams = {
      };
      var queryParams = {
        'character_ids': this.apiClient.buildCollectionParam(characterIds, 'csv'),
        'datasource': opts['datasource']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GetCharactersNames200Ok];

      return this.apiClient.callApi(
        '/characters/names/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCharactersCharacterIdCspa operation.
     * @callback module:api/CharacterApi~postCharactersCharacterIdCspaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostCharactersCharacterIdCspaCreated} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate a CSPA charge cost
     * Takes a source character ID in the url and a set of target character ID&#39;s in the body, returns a CSPA charge cost  ---  Alternate route: &#x60;/v3/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/legacy/characters/{character_id}/cspa/&#x60;  Alternate route: &#x60;/dev/characters/{character_id}/cspa/&#x60; 
     * @param {Integer} characterId An EVE character ID
     * @param {module:model/PostCharactersCharacterIdCspaCharacters} characters The target characters to calculate the charge for
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.datasource The server name you would like data from (default to tranquility)
     * @param {module:api/CharacterApi~postCharactersCharacterIdCspaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostCharactersCharacterIdCspaCreated}
     */
    this.postCharactersCharacterIdCspa = function(characterId, characters, opts, callback) {
      opts = opts || {};
      var postBody = characters;

      // verify the required parameter 'characterId' is set
      if (characterId == undefined || characterId == null) {
        throw "Missing the required parameter 'characterId' when calling postCharactersCharacterIdCspa";
      }

      // verify the required parameter 'characters' is set
      if (characters == undefined || characters == null) {
        throw "Missing the required parameter 'characters' when calling postCharactersCharacterIdCspa";
      }


      var pathParams = {
        'character_id': characterId
      };
      var queryParams = {
        'datasource': opts['datasource']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['evesso'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PostCharactersCharacterIdCspaCreated;

      return this.apiClient.callApi(
        '/characters/{character_id}/cspa/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
