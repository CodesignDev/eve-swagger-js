/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.3.2.dev3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.EveSwaggerInterface) {
      root.EveSwaggerInterface = {};
    }
    root.EveSwaggerInterface.GetIncursions200Ok = factory(root.EveSwaggerInterface.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The GetIncursions200Ok model module.
   * @module model/GetIncursions200Ok
   * @version 0.3.2.dev3
   */

  /**
   * Constructs a new <code>GetIncursions200Ok</code>.
   * 200 ok object
   * @alias module:model/GetIncursions200Ok
   * @class
   * @param constellationId {Integer} The constellation id in which this incursion takes place
   * @param factionId {Integer} The attacking faction's id
   * @param hasBoss {Boolean} Whether the final encounter has boss or not
   * @param infestedSolarSystems {Array.<Integer>} A list of infested solar system ids that are a part of this incursion
   * @param influence {Number} Influence of this incursion as a float from 0 to 1
   * @param stagingSolarSystemId {Integer} Staging solar system for this incursion
   * @param state {module:model/GetIncursions200Ok.StateEnum} The state of this incursion
   * @param type {String} The type of this incursion
   */
  var exports = function(constellationId, factionId, hasBoss, infestedSolarSystems, influence, stagingSolarSystemId, state, type) {
    var _this = this;

    _this['constellation_id'] = constellationId;
    _this['faction_id'] = factionId;
    _this['has_boss'] = hasBoss;
    _this['infested_solar_systems'] = infestedSolarSystems;
    _this['influence'] = influence;
    _this['staging_solar_system_id'] = stagingSolarSystemId;
    _this['state'] = state;
    _this['type'] = type;
  };

  /**
   * Constructs a <code>GetIncursions200Ok</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GetIncursions200Ok} obj Optional instance to populate.
   * @return {module:model/GetIncursions200Ok} The populated <code>GetIncursions200Ok</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('constellation_id')) {
        obj['constellation_id'] = ApiClient.convertToType(data['constellation_id'], 'Integer');
      }
      if (data.hasOwnProperty('faction_id')) {
        obj['faction_id'] = ApiClient.convertToType(data['faction_id'], 'Integer');
      }
      if (data.hasOwnProperty('has_boss')) {
        obj['has_boss'] = ApiClient.convertToType(data['has_boss'], 'Boolean');
      }
      if (data.hasOwnProperty('infested_solar_systems')) {
        obj['infested_solar_systems'] = ApiClient.convertToType(data['infested_solar_systems'], ['Integer']);
      }
      if (data.hasOwnProperty('influence')) {
        obj['influence'] = ApiClient.convertToType(data['influence'], 'Number');
      }
      if (data.hasOwnProperty('staging_solar_system_id')) {
        obj['staging_solar_system_id'] = ApiClient.convertToType(data['staging_solar_system_id'], 'Integer');
      }
      if (data.hasOwnProperty('state')) {
        obj['state'] = ApiClient.convertToType(data['state'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
    }
    return obj;
  }

  /**
   * The constellation id in which this incursion takes place
   * @member {Integer} constellation_id
   */
  exports.prototype['constellation_id'] = undefined;
  /**
   * The attacking faction's id
   * @member {Integer} faction_id
   */
  exports.prototype['faction_id'] = undefined;
  /**
   * Whether the final encounter has boss or not
   * @member {Boolean} has_boss
   */
  exports.prototype['has_boss'] = undefined;
  /**
   * A list of infested solar system ids that are a part of this incursion
   * @member {Array.<Integer>} infested_solar_systems
   */
  exports.prototype['infested_solar_systems'] = undefined;
  /**
   * Influence of this incursion as a float from 0 to 1
   * @member {Number} influence
   */
  exports.prototype['influence'] = undefined;
  /**
   * Staging solar system for this incursion
   * @member {Integer} staging_solar_system_id
   */
  exports.prototype['staging_solar_system_id'] = undefined;
  /**
   * The state of this incursion
   * @member {module:model/GetIncursions200Ok.StateEnum} state
   */
  exports.prototype['state'] = undefined;
  /**
   * The type of this incursion
   * @member {String} type
   */
  exports.prototype['type'] = undefined;


  /**
   * Allowed values for the <code>state</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StateEnum = {
    /**
     * value: "withdrawing"
     * @const
     */
    "withdrawing": "withdrawing",
    /**
     * value: "mobilizing"
     * @const
     */
    "mobilizing": "mobilizing",
    /**
     * value: "established"
     * @const
     */
    "established": "established"  };


  return exports;
}));


